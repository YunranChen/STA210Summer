{
  "hash": "ee8397e795e9c8886f40b865043231c4",
  "result": {
    "markdown": "---\ntitle: \"Lab 3 - Coffee ratings\"\neditor: visual\nformat: html\n---\n\n\n## Introduction\n\nIn today's lab you will analyze data from over 1,000 different coffees to explore the relationship between a coffee's aroma and it's overall quality.\n\nThis lab also provide you an instruction for how to collaborate with others using a Github repo. It provides you some suggestions on work on the same project in order. It suggests only one person type in the .qmd file, commit, and push updates at a time. Your team can choose to follow this workflow. \n\nIf you plan to try this workflow,\n\n-   assign each person on your team a number 1 through 4.\n-   follow the guidance \n\n## Packages\n\nThe following packages are used in the lab.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(knitr)\nlibrary(ggfortify)\n```\n:::\n\n\n## Data: Coffee ratings\n\nThe dataset for this lab comes from the [Coffee Quality Database](https://github.com/jldbc/coffee-quality-database) and was obtained from the [#TidyTuesday GitHub repo](https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-07-07/readme.md). It includes information about the origin, producer, measures of various characteristics, and the quality measure for over 1000 coffees.\n\nThis lab will focus on the following variables:\n\n-   `aroma`: Aroma grade, 0 - 10 scale\n-   `total_cup_points`: Measure of quality, 0 - 100 scale\n\nYou can find the definitions for all variables in the data set [here](https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-07-07/readme.md). [Click here](http://www.scaa.org/?page=resources&d=cupping-protocols&mod=article_inline) for more details about how these measures are obtained.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoffee_ratings <- read_csv(\"data/coffee_ratings.csv\")\n```\n:::\n\n\n## Exercises\n\n::: callout-note\n-   Include axis labels and an informative title for all plots.\n-   Use the `kable` function to neatly print tables and regression output. Write all interpretations in the context of the data.\n-   Do the following exercises in order, following each step carefully.\n:::\n\n::: {.callout-important appearance=\"simple\"}\n‚å®Ô∏è **Team Member 1: Hands on the keyboard. Write the answers to Exercises 1 and 2.**\n\nüôÖüèΩ All other team members: Hands off the keyboard until otherwise instructed!\n:::\n\n### Exercise 1\n\nVisualize the relationship between aroma and the total cup points. What do you observe from the plot? Use the plot the describe the relationship between the two variables.\n\n### Exercise 2\n\nFit the linear model and neatly display the results using 3 digits. Interpret the slope in context of the data.\n\n\n\n\n\n::: render-commit-push\n**Team Member 1:** Render the document and confirm that the changes are visible in the PDF. Then, commit (with an informative commit message) both the `.qmd` and PDF documents, and finally push the changes to GitHub. Make sure to commit and push all changed files so that your Git pane is empty afterwards.\n:::\n\n::: pull\n**Team Members 2, 3, 4:** Once Team Member 1 is done rendering, committing, and pushing, confirm that the changes are visible on GitHub in your team's lab repo. Then, in RStudio, click the **Pull** button in the Git pane to get the updated document. You should see the responses to Exercises 1 and 2 in your `.qmd` file.\n:::\n\n<br>\n\n\n::: {.callout-important appearance=\"simple\"}\n‚å®Ô∏è **Team Member 2: Hands on the keyboard. Write the answers to Exercises 3 and 4.**\n\nüôÖüèΩ All other team members: Hands off the keyboard until otherwise instructed!\n:::\n\n### Exercise 3\n\nWould the members of your group drink a coffee represented by the intercept? Why or why not? Discuss as a group and write the group's consensus.\n\n### Exercise 4\n\nLeverage is the measure of the distance between an observation's values of the predictor variables and the average values of the predictor variables for the entire data set. An observation s set if have **high leverage** if its combination of values for the predictor variables is very far from the typical combination of values in the data.An observation has high leverage if its combination of values for the predictor variables is very far from the typical combination of values in the data. Observations with high leverage should be considered as *potential* influential points.\n\nWe will proceed assuming the model conditions hold, so let's focus on the model diagnostics. We'll start by examining if there are any points with high leverage in the data.\n\nTheoretically, the leverage of the $i^{th}$ observation as follows:\n\n\n$$\nh_i = \\frac{1}{n} + \\frac{(x_i - \\bar{x})^2}{\\sum_{j = 1}^n (x_j - \\bar{x})^2}\n$$\n\n\nNote that leverage only depends on values of the predictor variable(s).\n\nThe sum of the leverages for all points is $p + 1$, where\n\n-   $p$ is the number of predictors\n-   In the case of SLR, $\\sum_{i = 1}^n h_i = 2$\n-   The \"typical\" leverage is $\\frac{(p + 1)}{n}$\n\nTherefore, an observation is said to have high leverage if\n\n\n$$\nh_i > \\frac{2(p + 1)}{n}\n$$\n\n\nIn addition to comparing the leverage of points to a threshold, we also generally visualize standard residuals vs. leverage values our data. The `autoplot()` function from the **ggfortify** package is very useful for drawing these standard plots easily.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(coffee_fit$fit, which = 5)\n```\n:::\n\n\n-   What threshold will you use to determine if there are points with high leverage for this dataset?\n-   Are there any observations with high leverage? If so, how many? Briefly explain, including any output, graphs, etc. you used to determine the response. Improve your plot by adding a new year to draw a vertical line (with `geom_vline()`) at the value of the threshold you're using to determine which points have high leverage.\n\n::: render-commit-push\n**Team Member 2:** Render the document and confirm that the changes are visible in the PDF. Then, commit (with an informative commit message) both the `.qmd` and PDF documents, and finally push the changes to GitHub. Make sure to commit and push all changed files so that your Git pane is empty afterwards.\n:::\n\n::: pull\n**Team Members 1, 3, 4:** Once Team Member 2 is done rendering, committing, and pushing, confirm that the changes are visible on GitHub in your team's lab repo. Then, in RStudio, click the **Pull** button in the Git pane to get the updated document. You should see the responses to Exercises 3 and 4 in your `.qmd` file.\n:::\n\n<br>\n\n\n::: {.callout-important appearance=\"simple\"}\n‚å®Ô∏è **Team Member 3: Hands on the keyboard. Write the answers to Exercises 5.**\n\nüôÖüèΩ All other team members: Hands off the keyboard until otherwise instructed!\n:::\n\n### Exercise 5\n\nAnother standard model diagnostic involves identifying points that don't fit the pattern from the regression line. We do this by determining which points have large **standardized** residuals (residual divided by the standard error of residuals).\n\n\n$$\nStd.~res_i = \\frac{y_i - \\hat{y}_1}{\\hat{\\sigma}_\\epsilon ~ \\sqrt{1 - h_i}},\n$$\n\n\nwhere $\\hat{\\sigma}_\\epsilon$ is the regression standard error.\n\n::: callout-note\nThese values are already calculated in the output of `augment()`.\n:::\n\nObservations that have standardized residuals of large magnitude (usually beyond $\\pm$ 3) are potential outliers, since they don't fit the pattern determined by the regression model. Therefore, a common practice is to plot standardized residuals vs. fitted values, to make it easier to identify outliers.\n\nWe can obtain this plot with the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(coffee_fit$fit, which = 3)\n```\n:::\n\n\nCreate this visualization and horizontal lines (with `geom_hline()`) at the cutoff values for \"large\" standardized residuals ($\\pm$ 3). Are there any such points in the data? If so, how many? Briefly explain, including any output, graphs, etc. you used to determine the response.\n\n::: render-commit-push\n**Team Member 3:** Render the document and confirm that the changes are visible in the PDF. Then, commit (with an informative commit message) both the `.qmd` and PDF documents, and finally push the changes to GitHub. Make sure to commit and push all changed files so that your Git pane is empty afterwards.\n:::\n\n::: pull\n**Team Members 1, 2, 4:** Once Team Member 3 is done rendering, committing, and pushing, confirm that the changes are visible on GitHub in your team's lab repo. Then, in RStudio, click the **Pull** button in the Git pane to get the updated document. You should see the responses to Exercise 5 and 4 in your `.qmd` file.\n:::\n\n<br>\n\n\n::: {.callout-important appearance=\"simple\"}\n‚å®Ô∏è **Team Member 4: Hands on the keyboard. Write the answers to Exercises 6.**\n\nüôÖüèΩ All other team members: Hands off the keyboard until otherwise instructed!\n:::\n\n### Exercise 6\n\nFinally, we'll examine Cook's Distance. An observation's influence on the regression line depends on how close it lies to the general trend of the data (i.e., its standardized residual) and it's leverage ($h_i$). **Cook's Distance** is a statistic that includes both of these components to measure an observation's overall impact on the model. Cook's Distance for the $i^{th}$ observation is defined as the follows:\n\n\n$$\nD_i = \\frac{(std.~res)^2}{p + 1} (\\frac{h_i}{1-\\frac{h_i})\n$$\\\n\nAn observation with large $D_i$ is said to have a strong influence on the predicted values. On that scale,\n\n-   $D_i$ \\> 0.5 is **moderately influential**\n-   $D_i$ \\> 1 is **very influential**\n\nWe can plot of Cook's distances vs. the observation number with the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(coffee_fit$fit, which = 4, ncol = 1)\n```\n\n::: {.cell-output-display}\n![](lab-3_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nStandardized residuals, leverage, and Cook's Distance should all be examined together. So what do we do with observations identified as outliers or leverage points?\n\nIt is **OK** to drop an observation based on the **predictor variables** if...\n\n-   It is meaningful to drop the observation given the context of the problem\n\n-   You intended to build a model on a smaller range of the predictor variables. You should mention this in the write up of the results and be careful to avoid extrapolation when making predictions.\n\nIt is **not OK** to drop an observation based on the response variable if...\n\n-   These are legitimate observations and should be in the model.\n-   You can try transformations or increasing the sample size by collecting more data.\n\nSo lastly, let's analyze Cook's D to determine if there are influential points in the data.\n\n-   Based on Cook's D, are there any influential points in our data? Briefly explain, including any output, graphs, etc. you used to determine the response.\n-   If there are influential points, briefly explain why they are outliers, i.e., not in the trend of the rest of the data.\n-   If there are influential points, remove those points from the data and refit the model. How do the model coefficients change, if at all?\n-   If there are influential points, would you recommend using the model fit with or without these points for inferential conclusions and predictions? Briefly explain why or why not. Additionally, briefly explain potential impacts your choice has on inferential conclusions and/or predictions.\n\n::: render-commit-push\n**Team Member 4:** Render the document and confirm that the changes are visible in the PDF. Then, commit (with an informative commit message) both the `.qmd` and PDF documents, and finally push the changes to GitHub. Make sure to commit and push all changed files so that your Git pane is empty afterwards.\n:::\n\n::: pull\n**Team Members 1, 2, 3:** Once Team Member 4 is done rendering, committing, and pushing, confirm that the changes are visible on GitHub in your team's lab repo. Then, in RStudio, click the **Pull** button in the Git pane to get the updated document. You should see the responses to Exercise 6 and 4 in your `.qmd` file.\n:::\n\n<br>\n\n\n## Wrapping up\n\n::: callout-important\n‚å®Ô∏è **Team Member 2: Hands on the keyboard. Make any edits as needed.**\n\nüôÖüèΩ All other team members: Hands off the keyboard until otherwise instructed!\n:::\n\n::: render-commit-push\n**Team Member 2:** Render the document and confirm that the changes are visible in the PDF. Then, commit (with an informative commit message) both the `.qmd` and PDF documents, and finally push the changes to GitHub. Make sure to commit and push all changed files so that your Git pane is empty afterwards.\n:::\n\n::: pull\n**Team Members 1, 3, 4:** Once Team Member 2 is done rendering, committing, and pushing, confirm that the changes are visible on GitHub in your team's lab repo. Then, in RStudio, click the **Pull** button in the Git pane to get the updated document. You should see the final version of your `.qmd` file.\n:::\n\n## Submission\n\n::: callout-warning\nBefore you wrap up the assignment, make sure all documents are updated on your GitHub repo. We will be checking these to make sure you have been practicing how to commit and push changes.\n\nRemember -- you must turn in a PDF file to the Gradescope page before the submission deadline for full credit.\n:::\n\nTo submit your assignment:\n\n-   Select **one** team member to upload the team's PDF submission to Gradescope.\n-   Be sure to include every team member's name in the Gradescope submission.\n-   Go to [http://www.gradescope.com](http://www.gradescope.com/) and click *Log in* in the top right corner.\n-   Click *School Credentials* ‚û°Ô∏è *Duke NetID* and log in using your NetID credentials.\n-   Click on your *STA 210* course.\n-   Click on the assignment, and you'll be prompted to submit it.\n-   Mark the pages associated with each exercise. All of the pages of your lab should be associated with at least one question (i.e., should be \"checked\"). If any answer spans multiple pages, then mark all pages.\n-   Select the first page of your PDF submission to be associated with the *\"Workflow & formatting\"* section.\n\n::: callout-important\nThere should only be **one** submission per team on Gradescope.\n:::\n\n## Grading\n\nTotal points available: 50 points.\n\n| Component              | Points |\n|:-----------------------|:-------|\n| Ex 1 - 6               | 42     |\n| Workflow & formatting  | 8[^1]  |\n\n\n[^1]: The \"Workflow & formatting\" grade is to assess the reproducible workflow. This includes having at least 3 informative commit messages and updating the name and date in the YAML.\n",
    "supporting": [
      "lab-3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}