{
  "hash": "bf311c7689e56e85ca0ae5b6d9665d13",
  "result": {
    "markdown": "---\ntitle: \"Data Wrangling\"\nsubtitle: \"STA 210 - Summer 2022\"\nauthor: \"Yunran Chen\"\nfooter:  \"[yunranchen.github.io/STA210Summer/](https://yunranchen.github.io/STA210Summer/)\"\nlogo: \"images/logo.png\"\nformat: \n  revealjs:\n    theme: slides.scss\n    transition: fade\n    slide-number: true\n    incremental: true \n    chalkboard: true\n    highlight-style: ayu-mirage\ncode-link: true\neditor: visual\nexecute:\n  freeze: auto\n  echo: true\n---\n\n\n\n\n# Welcome\n\n## Topics\n\n-   Data Cleaning/Wrangling\n\n-   Course Evaluation (10-15min)\n\n## Data Cleaning using tidyverse\n\n-   Raw data to understanding, insight, and knowledge\n\n-   Workflow for real-world data analysis\n\n. . .\n\n![](images/lec-26/data-science.png)\n\n## Packages in Tidyverse\n\n![](images/lec-26/tidyverse.png) \n\n# Data Wrangling\n\n## Focus on data wrangling\n\n![](images/lec-26/data-science-wrangle.png)\n\n-   Data import (`readr`, `tibble`)\n\n-   Tidy data (`tidyr`)\n\n-   Wrangle (`dplyr`, `stringr`, `lubridate`,`janitor`)\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(cowplot)\n```\n:::\n\n\n# Data import\n\n## Data import using `readr` {.smaller}\n\n-   `read_csv`, ...\n\n## Extract the certain type of data {.smaller}\n\n`readr::parse_*`: parse the characters/numbers only\n\n. . .\n\n![](images/lec-26/parse_number.png)\n\n## function `parse` in pkg `readr` {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nparse_number(\"$100\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n\n```{.r .cell-code}\nparse_number(\"20%\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n\n```{.r .cell-code}\nparse_number(\"It cost $123.45\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 123.45\n```\n:::\n\n```{.r .cell-code}\n# Used in America\nparse_number(\"$123,456,789\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 123456789\n```\n:::\n\n```{.r .cell-code}\n# Used in many parts of Europe\nparse_number(\"123.456.789\", locale = locale(grouping_mark = \".\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 123456789\n```\n:::\n\n```{.r .cell-code}\n# Used in Switzerland\nparse_number(\"123'456'789\", locale = locale(grouping_mark = \"'\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 123456789\n```\n:::\n:::\n\n\n## function `parse` in pkg `readr` {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx1 <- \"El Ni\\xf1o was particularly bad this year\"\nx2 <- \"\\x82\\xb1\\x82\\xf1\\x82\\xc9\\x82\\xbf\\x82\\xcd\"\n\nx1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"El Ni\\xf1o was particularly bad this year\"\n```\n:::\n\n```{.r .cell-code}\nx2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"\\x82\\xb1\\x82\\xf1\\x82ɂ\\xbf\\x82\\xcd\"\n```\n:::\n\n```{.r .cell-code}\nparse_character(x1, locale = locale(encoding = \"Latin1\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"El Niño was particularly bad this year\"\n```\n:::\n\n```{.r .cell-code}\nparse_character(x2, locale = locale(encoding = \"Shift-JIS\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"こんにちは\"\n```\n:::\n:::\n\n\n## function `parse` in pkg `readr` {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nparse_date(\"1 janvier 2015\", \"%d %B %Y\", locale = locale(\"fr\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2015-01-01\"\n```\n:::\n\n```{.r .cell-code}\nparse_date(\"01/02/15\", \"%m/%d/%y\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2015-01-02\"\n```\n:::\n\n```{.r .cell-code}\nparse_date(\"01/02/15\", \"%d/%m/%y\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2015-02-01\"\n```\n:::\n\n```{.r .cell-code}\nparse_date(\"01/02/15\", \"%y/%m/%d\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2001-02-15\"\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nparse_datetime(\"2010-10-01T2010\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2010-10-01 20:10:00 UTC\"\n```\n:::\n\n```{.r .cell-code}\nlibrary(hms)\nparse_time(\"01:10 am\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n01:10:00\n```\n:::\n:::\n\n\n## Other packages for data importing\n\n-   Package `haven`: SPSS, Stata, SAS file\n\n-   Package `readxl`: Excel file .xls, .xlsx\n\n-   Package `jsonlite`/`htmltab`: json, html\n\n-   use `as_tibble` to coerce a data frame to a tibble\n\n## `janitor` package can help with cleaning names\n\n-   `clean_names`,`remove_empty_cols`,`remove_empty_rows`\n\n. . .\n\n![](images/lec-26/janitor_clean_names.png)\n\n## `janitor` package\n\n-   `clean_names`,`remove_empty_cols`,`remove_empty_rows`\n\n. . .\n\n![](images/lec-26/coding_cases.png)\n\n# Tidy data\n\n## Tidy data\n\n![](images/lec-26/tidyverse.png)\n\n## Tidy data\n\n![](images/lec-26/tidydata_1.jpeg)\n\n## Tidy data\n\n![](images/lec-26/tidydata_2.jpeg)\n\n## Tidy data\n\n![](images/lec-26/tidydata_3.jpeg)\n\n## Tidy data\n\n![](images/lec-26/tidydata_4.jpeg)\n\n## Tidy data\n\n![](images/lec-26/tidy-1.png)\n\n## `pivot_longer` function in `tidyr` pkg\n\n-   `pivot_longer`: from wide to long\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntable4 %>% \n  pivot_longer(c(`1999`, `2000`), names_to = \"year\", values_to = \"cases\")\n```\n:::\n\n\n![](images/lec-26/tidy-9.png) \n\n## `pivot_wider` function in `tidyr` pkg\n\n-   `pivot_wider`: from long to wide\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntable2 %>%\n    pivot_wider(names_from = key, values_from = value)\n```\n:::\n\n\n![](images/lec-26/tidy-8.png) \n\n## `separate` function in `tidyr` pkg\n\n-   `separate`: from 1 column to 2+ column\n-   can `sep` based on digits or characters.\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntable3 %>% \n  separate(rate, into = c(\"cases\", \"population\"), sep = \"/\")\n```\n:::\n\n\n![](images/lec-26/tidy-17.png)\n\n## `unite` function in `tidyr` pkg\n\n-   `unite`: from 2+ column to 1 column\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntable6 %>% \n  unite(\"year\", century, year, sep = \"\")\n```\n:::\n\n\n![](images/lec-26/tidy-18.png) \n\n# Transform\n\n## Packages in Tidyverse\n\n![](images/lec-26/tidyverse.png) \n\n# `dplyr`: `join` multiple datasets\n\n## Relational datasets in `nycflights13`\n\n![](images/lec-26/relational-nycflights.png)\n\n\n## `join` multiple datasets\n\nR pkg `nycflights13` provide multiple relational datasets:\n\n-   `flights` connects to `planes` via a single variable, `tailnum`.\n\n-   `flights` connects to `airlines` through the `carrier` variable.\n\n-   `flights` connects to `airports` in two ways: via the `origin` and `dest` variables.\n\n-   `flights` connects to `weather` via `origin` (the location), and `year`, `month`, `day` and `hour` (the time)\n\n\n## `inner_join`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninner_join(x,y,by=\"key\")\n```\n:::\n\n\n![](images/lec-26/join-inner.png)\n\n## `*_join` {.smaller}\n\n`left_join`, `right_join`, `full_join`\n\n. . .\n\n![](images/lec-26/join-outer.png) \n\n## Data wrangling with `dplyr` {.smaller}\n\n-   `slice()`: pick rows using indexes\n-   `filter()`: keep rows satisfying your condition\n-   `select()`: select variables obtain a tibble\n-   `pull()`: grab a column as a vector\n-   `relocate()`: relocate a variable\n-   `arrange()`: reorder rows\n-   `rename()`: rename a variable\n-   `mutate()`: add columns\n-   `group_by()%>%summarize()`: summary statistics for different groups\n-   `count()`: count the frequency\n-   `distinct()`: keep unique rows\n-   functions within `mutate()`: `across()`, `if_else()`, `case_when()`\n-   functions for selecting variables: `starts_with()`, `ends_with()`, `contains()`, `matches()`, `everything()`\n\n## `case_when`\n\n![](images/lec-26/dplyr_case_when_sm.png)\n\n## Practice {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(\"palmerpenguins\")\n```\n:::\n\n\n-   Keep the chinstrap and gentoo penguins, living in Dream and Biscoe Islands.\n-   Get first 100 observation\n-   Only keep columns from `species` to `flipper_length_mm`, and `sex` and `year`\n-   Rename `sex` as `gender`\n-   Move `gender` right after island, move numeric variables after factor variables\n-   Add a new column to identify each observation\n-   Transfer `island` as character\n-   Add a new variable called `bill_ratio` which is the ratio of bill length to bill depth\n-   Obtain the mean and standard deviation of body mass of different species\n-   For different species, obtain the mean of variables ending with `mm`\n-   Provide the distribution of different species of penguins living in different island across time\n\n## Practice\n\nTo penguins, add a new column size_bin that contains:\n\n-   \"large\" if body mass is greater than 4500 g\n-   \"medium\" if body mass is greater than 3000 g, and less than or equal to 4500 g\n-   \"small\" if body mass is less than or equal to 3000 g\n\n# Deal with different types of variables\n\n## Deal with different types of variables\n\n-   `stringr` for strings\n-   `forcats` for factors\n-   `lubridate` for dates and times\n\n# `stringr` for strings\n\n## `stringr` for strings\n\n-   [Cheatsheets for `stringr`](https://github.com/rstudio/cheatsheets/blob/main/strings.pdf)\n\n## Useful functions in `stringr`\n\nIf your raw data has numbers as variable names, you may consider to add characters in front of it.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntable4 %>% \n  pivot_longer(c(`1999`, `2000`), names_to = \"year\", values_to = \"cases\")\n```\n:::\n\n\n. . .\n\n`str_c`: join multiple strings to a single string\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstr_c(c(\"x\", \"y\", \"z\"), collapse = \", \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x, y, z\"\n```\n:::\n\n```{.r .cell-code}\nstr_c(\"x\",1:3) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x1\" \"x2\" \"x3\"\n```\n:::\n:::\n\n\n## Useful functions in `stringr`\n\nTo obtain nice variable names.\n-   Can use `janitor::clean_names`\n-   Or `str_to_upper`, `str_to_lower`, `str_to_title`\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncolnames(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"species\"           \"island\"            \"bill_length_mm\"   \n[4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n[7] \"sex\"               \"year\"             \n```\n:::\n\n```{.r .cell-code}\ncolnames(penguins)%>%\n  str_to_title()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Species\"           \"Island\"            \"Bill_length_mm\"   \n[4] \"Bill_depth_mm\"     \"Flipper_length_mm\" \"Body_mass_g\"      \n[7] \"Sex\"               \"Year\"             \n```\n:::\n:::\n\n\n## Useful functions in `stringr` {.smaller}\n\n-   `str_detect()`: Return TRUE/FALSE for strings satisfying the pattern\n-   pattern: regular expressions ([CheatSheets](https://github.com/rstudio/cheatsheets/blob/main/strings.pdf))\n-   `str_replace`, `str_replace_all`(multiple replacements)\n-   Text mining: Useful if your have text in the survey, and you want to extract important features from text\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- c(\"apple\", \"banana\", \"pear\")\nstr_detect(x, \"[aeiou]$\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\nstr_replace(x, \"[aeiou]\", \"-\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"-pple\"  \"b-nana\" \"p-ar\"  \n```\n:::\n\n```{.r .cell-code}\nx <- c(\"1 house\", \"2 cars\", \"3 people\")\nstr_replace_all(x, c(\"1\" = \"one\", \"2\" = \"two\", \"3\" = \"three\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"one house\"    \"two cars\"     \"three people\"\n```\n:::\n:::\n\n\n# `forcats` for factors\n\n## `forcats` for factors\n\n-   `fct_infreq`: order levels by frequency\n-   `fct_rev`: reverse the order of levels\n-   `fct_reorder`,`fct_reorder2`: order according to other variables\n-   `fct_relevel`: reorder manually\n-   `fct_collapse`: combine levels\n-   Useful for visualization in `ggplot`.\n\n## `fct_infreq` and `fct_rev`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1=penguins %>%\n  ggplot(aes(species)) + geom_bar()\np2=penguins %>%\n  mutate(species=species %>% fct_infreq() %>% fct_rev()) %>%\n  ggplot(aes(species)) + geom_bar()\nplot_grid(p1,p2)\n```\n\n::: {.cell-output-display}\n![](lec-26_files/figure-revealjs/unnamed-chunk-17-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## Examples for `fct_reorder`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(cowplot)\npeng_summary=penguins %>%\n  group_by(species)%>%\n  summarise(\n    bill_length_mean=mean(bill_length_mm, na.rm=T),\n    bill_depth_mean=mean(bill_depth_mm, na.rm=T))\np1=ggplot(peng_summary,aes(bill_length_mean,species)) + \n  geom_point()\np2=ggplot(peng_summary,aes(bill_length_mean,fct_reorder(species,bill_length_mean))) + geom_point()\nplot_grid(p1,p2)\n```\n\n::: {.cell-output-display}\n![](lec-26_files/figure-revealjs/unnamed-chunk-18-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## Examples for `fct_reorder2` {.smaller}\n\n-   Reorder the factor by the y values associated with the largest x values\n-   Easier to read: colours line up with the legend\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1=ggplot(penguins,aes(bill_length_mm,flipper_length_mm,color=species)) + \n  geom_line()\np2=ggplot(penguins,aes(bill_length_mm,flipper_length_mm,color=fct_reorder2(species,bill_length_mm,flipper_length_mm))) + \n  geom_line() + guides(color=guide_legend(title=\"species\"))\nplot_grid(p1,p2)\n```\n\n::: {.cell-output-display}\n![](lec-26_files/figure-revealjs/unnamed-chunk-19-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## `fct_recode()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins %>%\n  count(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  species       n\n  <fct>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n:::\n\n```{.r .cell-code}\npenguins %>%\n  mutate(species = fct_recode(species,\n                              \"Adeliea\" = \"Adelie\",\n                               \"ChinChin\" = \"Chinstrap\",\n                               \"Gentooman\" = \"Gentoo\")) %>%\n  count(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  species       n\n  <fct>     <int>\n1 Adeliea     152\n2 ChinChin     68\n3 Gentooman   124\n```\n:::\n:::\n\n\n## `fct_collapse`\n\nCan use to collapse lots of levels\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins %>% \n  mutate(species = fct_collapse(species,\n                                \"Adelie\"=\"Adelie\",\n                                \"Other\"=c(\"Chinstrap\",\"Gentoo\")))%>%\n  count(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  species     n\n  <fct>   <int>\n1 Adelie    152\n2 Other     192\n```\n:::\n:::\n\n\n## `fct_lump`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvolcano <- read_csv(here::here(\"slides\", \"data/volcano.csv\"))\nvolcano %>% count(country) %>% nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 89\n```\n:::\n\n```{.r .cell-code}\nvolcano %>%\n  mutate(country=fct_lump(country,n=5))%>%\n  count(country)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  country           n\n  <fct>         <int>\n1 Chile            43\n2 Indonesia        95\n3 Japan            92\n4 Russia           79\n5 United States    99\n6 Other           550\n```\n:::\n:::\n\n\n# `lubridate` for dates and times\n\n## `lubridate` for dates and times\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(\"lubridate\")\nlibrary(nycflights13)\n```\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nflights %>% \n  select(year, month, day, hour, minute) %>% \n  mutate(departure = make_datetime(year, month, day))%>%\n  ggplot(aes(departure))+\n  geom_freqpoly()\n```\n\n::: {.cell-output-display}\n![](lec-26_files/figure-revealjs/unnamed-chunk-24-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nflights %>% \n  select(year, month, day, hour, minute) %>% \n  mutate(departure = make_datetime(year, month, day))%>%\n  filter(departure < ymd(20131002)) %>% \n  ggplot(aes(departure))+\n  geom_freqpoly()\n```\n\n::: {.cell-output-display}\n![](lec-26_files/figure-revealjs/unnamed-chunk-25-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n-   `year()`, `month()`\n-   `mday()` (day of the month), `yday()` (day of the year), `wday()` (day of the week)\n-   `hour()`, `minute()`, `second()`\n\n## Reference\n\n-   [Allison Horst's Posts](https://allisonhorst.shinyapps.io/dplyr-learnr/#section-welcome)\n-   [Julie Scholler's Slides](https://juliescholler.gitlab.io/files/M2/M2-CM1-workflow1.html#1)\n-   [R for Data Science](https://r4ds.had.co.nz/index.html)\n-   [Gina Reynolds's Slides](https://evamaerey.github.io/little_flipbooks_library/data_cleaning/data_cleaning#1)\n-   [Sharla Gelfand's Slides](https://uoft-brown-bag-data-cleaning.netlify.app/#1)\n-   [David's Blog](https://rfortherestofus.com/2019/12/how-to-clean-messy-data-in-r/)\n",
    "supporting": [
      "lec-26_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}