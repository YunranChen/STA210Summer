{"title":"SLR: Mathematical models for inference","markdown":{"yaml":{"title":"SLR: Mathematical models for inference","subtitle":"STA 210 - Spring 2022","author":"Dr. Mine Ã‡etinkaya-Rundel","footer":"[sta210-s22.github.io/website](https://sta210-s22.github.io/website/)","logo":"images/logo.png","format":{"revealjs":{"theme":"slides.scss","multiplex":true,"transition":"fade","slide-number":true,"incremental":true,"chalkboard":true}},"editor":"visual","execute":{"freeze":"auto"}},"headingText":"| include: false","containsRefs":false,"markdown":"\n\n```{r setup}\n\nlibrary(countdown)\n\nknitr::opts_chunk$set(\n  fig.width = 8,\n  fig.asp = 0.618,\n  fig.retina = 3,\n  dpi = 300,\n  out.width = \"80%\",\n  fig.align = \"center\"\n)\n\noptions(scipen = 100)\n```\n\n# Welcome\n\n## Computational setup\n\n```{r packages}\n#| echo: true\n#| message: false\n\n# load packages\nlibrary(tidyverse)   # for data wrangling and visualization\nlibrary(tidymodels)  # for modeling\nlibrary(openintro)   # for the duke_forest dataset\nlibrary(scales)      # for pretty axis labels\nlibrary(knitr)       # for pretty tables\nlibrary(kableExtra)  # also for pretty tables\n\n# set default theme and larger font size for ggplot2\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 20))\n```\n\n# Recap of last lecture\n\n## Data: Duke Forest houses\n\n```{r}\nggplot(duke_forest, aes(x = area, y = price)) +\n  geom_point(alpha = 0.7) +\n  labs(\n    x = \"Area (square feet)\",\n    y = \"Sale price (USD)\",\n    title = \"Price and area of houses in Duke Forest\"\n  ) +\n  scale_y_continuous(labels = label_dollar()) +\n  scale_x_continuous(labels = label_number())\n```\n\n## The regression model {.smaller}\n\n```{r}\n#| echo: true\n\ndf_fit <- linear_reg() %>%\n  set_engine(\"lm\") %>%\n  fit(price ~ area, data = duke_forest)\n\ntidy(df_fit) %>%\n  kable(digits = 2)\n```\n\n. . .\n\n```{r}\nintercept <- tidy(df_fit) %>% filter(term == \"(Intercept)\") %>% pull(estimate) %>% round()\nslope <- tidy(df_fit) %>% filter(term == \"area\") %>% pull(estimate) %>% round()\n```\n\n-   **Intercept:** Duke Forest houses that are 0 square feet are expected to sell, on average, for `r dollar(intercept)`.\n-   **Slope:** For each additional square foot, the model predicts the sale price of Duke Forest houses to be higher, on average, by `r dollar(slope)`.\n\n## Inference for simple linear regression\n\n-   Calculate a confidence interval for the slope, $\\beta_1$\n\n-   Conduct a hypothesis test for the interval, $\\beta_1$\n\n## Confidence interval via bootstrapping {.smaller}\n\n-   Bootstrap new samples from the original sample\n-   Fit models to each of the samples and estimate the slope\n-   Use features of the distribution of the bootstrapped slopes to construct a confidence interval\n\n## Bootstrapping pipeline I\n\n```{r}\n#| echo: true\n# #| code-line-numbers: \"|1|3|4\"\n#| \nset.seed(119)\n\nduke_forest %>%\n  specify(price ~ area)\n```\n\n## Bootstrapping pipeline II\n\n```{r}\n#| echo: true\n# #| code-line-numbers: \"|5\"\n\nset.seed(119)\n\nduke_forest %>%\n  specify(price ~ area) %>%\n  generate(reps = 1000, type = \"bootstrap\")\n```\n\n## Bootstrapping pipeline III\n\n```{r}\n#| echo: true\n# #| code-line-numbers: \"|6\"\n\nset.seed(119)\n\nduke_forest %>%\n  specify(price ~ area) %>%\n  generate(reps = 1000, type = \"bootstrap\") %>%\n  fit()\n```\n\n## Bootstrapping pipeline IV\n\n```{r}\n#| echo: true\n# #| code-line-numbers: \"|3\"\n\nset.seed(119)\n\nboot_dist <- duke_forest %>%\n  specify(price ~ area) %>%\n  generate(reps = 1000, type = \"bootstrap\") %>%\n  fit()\n```\n\n## Visualize the bootstrap distribution\n\n```{r}\n#| echo: true\n# #| code-line-numbers: \"|2\"\n\nboot_dist %>%\n  filter(term == \"area\") %>%\n  ggplot(aes(x = estimate)) +\n  geom_histogram(binwidth = 10)\n```\n\n## Compute the CI\n\nTwo methods:\n\n::: nonincremental\n-   Percentile method\n-   Standard error method\n:::\n\n```{r}\nboot_dist %>%\n  filter(term == \"area\") %>%\n  ggplot(aes(x = estimate)) +\n  geom_histogram(binwidth = 10)\n```\n\n## But first...\n\n```{r}\n#| echo: true\n\nobs_fit <- duke_forest %>%\n  specify(price ~ area) %>%\n  fit()\n\nobs_fit\n```\n\n## Percentile method\n\n```{r}\n#| echo: true\n# #| code-line-numbers: \"|4\"\n\nboot_dist %>%\n  get_confidence_interval(\n    level = 0.95,\n    type = \"percentile\",\n    point_estimate = obs_fit\n  )\n```\n\n## Standard error method\n\n```{r}\n#| echo: true\n# #| code-line-numbers: \"|4\"\n\nboot_dist %>%\n  get_confidence_interval(\n    level = 0.95,\n    type = \"se\",\n    point_estimate = obs_fit\n  )\n```\n\n# Hypothesis test for the slope\n\n## Research question and hypotheses\n\n-   \"Do the data provide sufficient evidence that $\\beta_1$ (the true slope for the population) is different from 0?\"\n-   **Null hypothesis** - $H_0: \\beta_1 = 0$, there is no linear relationship between `area` and `price`\n-   **Alternative hypothesis** - $H_A: \\beta_1 \\ne 0$, there is a linear relationship between `area` and `price`\n\n## Hypothesis testing framework {.smaller}\n\n-   Start with a null hypothesis, $H_0$ that represents the status quo\n-   Set an alternative hypothesis, $H_A$ that represents the research question, i.e. what we're testing for\n-   Conduct a hypothesis test under the assumption that the null hypothesis is true and calculate a **p-value** (probability of observed or more extreme outcome given that the null hypothesis is true)\n    -   if the test results suggest that the data do not provide convincing evidence for the alternative hypothesis, stick with the null hypothesis\n    -   if they do, then reject the null hypothesis in favor of the alternative\n\n## Quantify the variability of the slope {.smaller}\n\n**for testing**\n\n-   Two approaches:\n    1.  Via simulation (what we'll review from lab)\n    2.  Via mathematical models (what we'll cover in the remainder of class)\n-   Randomizing to quantify the variability of the slope for the purpose of testing, under the assumption that the null hypothesis is true:\n    -   Simulate new samples from the original sample via permutation\n    -   Fit models to each of the samples and estimate the slope\n    -   Use features of the distribution of the permuted slopes to conduct a hypothesis test\n\n## Permutation, described {.smaller}\n\n::: columns\n::: {.column width=\"40%\"}\n-   Set the null hypothesis to be true, and measure the natural variability in the data due to sampling but **not** due to variables being correlated by permuting permute one variable to eliminate any existing relationship between the variables\n-   Each `price` value is randomly assigned to `area` of a given house, i.e. `area` and `price` are no longer matched for a given house\n:::\n\n::: {.column width=\"60%\"}\n```{r}\nset.seed(1234)\n\nduke_forest_rand <- duke_forest %>%\n  mutate(\n    price_Observed = price,\n    price_Permuted = sample(price, size = nrow(duke_forest))\n    ) %>%\n  select(contains(\"price_\"), area)\nduke_forest_rand\n```\n:::\n:::\n\n## Permutation, visualized\n\n::: columns\n::: {.column width=\"50%\"}\n-   Each of the observed values for `area` (and for `price`) exist in both the observed data plot as well as the permuted `price` plot\n-   The permutation removes the linear relationship between `area` and `price`\n:::\n\n::: {.column width=\"50%\"}\n```{r}\n#| out.width: \"100%\"\n#| fig.asp: 1.2\n\nduke_forest_rand %>%\n  pivot_longer(cols = contains(\"price_\"), names_to = \"price_type\", names_prefix = \"price_\", values_to = \"price\") %>%\n  ggplot(aes(x = area, y = price)) +\n  geom_point() +\n  geom_smooth(aes(color = price_type), method = \"lm\", se = FALSE, show.legend = FALSE) +\n  facet_wrap(~price_type, nrow = 2) +\n  scale_color_manual(values = c(\"#8F2D56\", \"gray\")) +\n  scale_x_continuous(labels = label_number()) +\n  scale_y_continuous(labels = label_dollar()) +\n  labs(x = \"Area\", y = \"Price\")\n```\n:::\n:::\n\n## Permutation, repeated\n\nRepeated permutations allow for quantifying the variability in the slope under the condition that there is no linear relationship (i.e., that the null hypothesis is true)\n\n```{r}\nset.seed(1125)\n\ndf_perms_1000 <- duke_forest %>%\n  specify(price ~ area) %>%\n  hypothesize(null = \"independence\") %>%\n  generate(reps = 1000, type = \"permute\")\n\nggplot(df_perms_1000, \n       aes(x = area, y = price, group = replicate)) +\n  geom_line(stat = \"smooth\", method = \"lm\", se = FALSE, alpha = 0.1) +\n  labs(\n    x = \"Area (square feet)\",\n    y = \"Sale price (USD)\",\n    title = \"1,000 permuted samples\"\n  ) +\n  scale_y_continuous(labels = label_dollar(), limits = c(min(duke_forest$price), max(duke_forest$price))) +\n  scale_x_continuous(labels = label_number(), limits = c(min(duke_forest$area), max(duke_forest$area))) +\n  geom_abline(intercept = intercept, slope = slope, color = \"#8F2D56\")\n```\n\n## Concluding the hypothesis test {.smaller}\n\n::: question\nIs the observed slope of $\\hat{\\beta_1} = 159$ (or an even more extreme slope) a likely outcome under the null hypothesis that $\\beta = 0$?\nWhat does this mean for our original question: \"Do the data provide sufficient evidence that $\\beta_1$ (the true slope for the population) is different from 0?\"\n:::\n\n```{r}\n#| out.width: \"60%\"\n#| fig.asp: 0.618\n\nnull_dist <- df_perms_1000 %>%\n  fit()\n\nggplot(null_dist %>% filter(term == \"area\"),\n       aes(x = estimate)) +\n  geom_histogram(binwidth = 10, color = \"white\") +\n  labs(x = \"Slope\", y = \"Count\",\n       title = \"Slopes of 1000 permuted samples\") +\n  geom_vline(xintercept = slope, color = \"#8F2D56\", size = 1) +\n  geom_vline(xintercept = -1*slope, color = \"#8F2D56\", size = 1, linetype = \"dashed\") +\n  scale_x_continuous(limits = c(-slope, slope), breaks = seq(-150, 150, 50))\n```\n\n## Permutation pipeline I\n\n```{r}\n#| echo: true\n# #| code-line-numbers: \"|1|3|4\"\n#| \nset.seed(1125)\n\nduke_forest %>%\n  specify(price ~ area)\n```\n\n## Permutation pipeline II\n\n```{r}\n#| echo: true\n# #| code-line-numbers: \"|5\"\n\nset.seed(1125)\n\nduke_forest %>%\n  specify(price ~ area) %>%\n  hypothesize(null = \"independence\")\n```\n\n## Permutation pipeline III\n\n```{r}\n#| echo: true\n# #| code-line-numbers: \"|6\"\n\nset.seed(1125)\n\nduke_forest %>%\n  specify(price ~ area) %>%\n  hypothesize(null = \"independence\") %>%\n  generate(reps = 1000, type = \"permute\")\n```\n\n## Permutation pipeline IV\n\n```{r}\n#| echo: true\n# #| code-line-numbers: \"|7\"\n\nset.seed(1125)\n\nduke_forest %>%\n  specify(price ~ area) %>%\n  hypothesize(null = \"independence\") %>%\n  generate(reps = 1000, type = \"permute\") %>%\n  fit()\n```\n\n## Permutation pipeline V\n\n```{r}\n#| echo: true\n# #| code-line-numbers: \"|3\"\n\nset.seed(1125)\n\nnull_dist <- duke_forest %>%\n  specify(price ~ area) %>%\n  hypothesize(null = \"independence\") %>%\n  generate(reps = 1000, type = \"permute\") %>%\n  fit()\n```\n\n## Visualize the null distribution\n\n```{r}\n#| echo: true\n# #| code-line-numbers: \"|2\"\n\nnull_dist %>%\n  filter(term == \"area\") %>%\n  ggplot(aes(x = estimate)) +\n  geom_histogram(binwidth = 10, color = \"white\")\n```\n\n## Reason around the p-value {.smaller}\n\n::: question\nIn a world where the there is no relationship between the area of a Duke Forest house and in its price ($\\beta_1 = 0$), what is the probability that we observe a sample of `r nrow(duke_forest)` houses where the slope fo the model predicting price from area is 159 or even more extreme?\n:::\n\n```{r}\nnull_dist %>%\n  filter(term == \"area\") %>%\n  ggplot(aes(x = estimate)) +\n  geom_histogram(binwidth = 10, color = \"white\") +\n  geom_vline(xintercept = slope, color = \"#8F2D56\", size = 1) +\n  geom_vline(xintercept = -1*slope, color = \"#8F2D56\", size = 1, linetype = \"dashed\") +\n  scale_x_continuous(limits = c(-slope, slope), breaks = seq(-150, 150, 50))\n```\n\n## Compute the p-value\n\n::: question\nWhat does this warning mean?\n:::\n\n```{r}\n#| echo: true\n#| warning: true\n\nget_p_value(\n  null_dist,\n  obs_stat = obs_fit,\n  direction = \"two-sided\"\n)\n```\n\n# Mathematical models for inference\n\n## The regression model, revisited\n\n```{r}\n#| echo: true\n\ndf_fit <- linear_reg() %>%\n  set_engine(\"lm\") %>%\n  fit(price ~ area, data = duke_forest)\n\ntidy(df_fit) %>%\n  kable(digits = 3)\n```\n\n## HT and CI, recapped {.smaller}\n\n-   **Hypothesis test:**\n\n    ::: nonincremental\n    -   Do the data provide sufficient evidence that $\\beta_1$ (the true slope for the population) is different from 0?\n    -   Null hypothesis - $H_0: \\beta_1 = 0$, there is no linear relationship between `area` and `price`.\n    -   Alternative hypothesis - $H_A: \\beta_1 \\ne 0$, there is a linear relationship between `area` and `price`.\n    :::\n\n-   **Confidence interval:** Provide a plausible range of values for $\\beta_1$ at a given confidence level.\n\n## HT and CI, revisited {.smaller}\n\n-   Earlier we computed a CI and conducted a HT via simulation:\n    -   CI: Bootstrap the observed sample to simulate the distribution of the slope\n    -   HT: Permute the observed sample to simulate the distribution of the slope under the assumption that the null hypothesis is true\n-   Now we'll do these based on theoretical results, i.e., by using the Central Limit Theorem to define the distribution of the slope and use features (shape, center, spread) of this distribution to compute bounds of the CI and the p-value for the HT\n\n## Mathematical representation of the model {.smaller}\n\n$$\n\\begin{aligned}\nY &= Model + Error \\\\\n&= f(X) + \\epsilon \\\\\n&= \\mu_{Y|X} + \\epsilon \\\\\n&= \\beta_0 + \\beta_1 X + \\epsilon\n\\end{aligned}\n$$\n\nwhere the errors are independent and normally distributed:\n\n-   independent: Knowing the error term for one observation doesn't tell you anything about the error term for another observation\n-   normally distributed: $\\epsilon \\sim N(0, \\sigma_\\epsilon^2)$\n\n## Mathematical representation, visualized {.smaller}\n\n$$\nY|X \\sim N(\\beta_0 + \\beta_1 X, \\sigma_\\epsilon^2)\n$$\n\n::: columns\n::: {.column width=\"70%\"}\n```{r}\n#| out.width: \"100%\"\n#| fig.align: \"center\"\n\n# Code modified from https://stackoverflow.com/questions/31794876/ggplot2-how-to-curve-small-gaussian-densities-on-a-regression-line?rq=1\n# Modified based on BYSH: https://bookdown.org/roback/bookdown-bysh/ch-MLRreview.html#ordinary-least-squares-ols-assumptions\nset.seed(0)\ndat <- data.frame(\n  x = (x <- runif(10000, 0, 50)),\n  y = rnorm(10000, 10 * x, 100)\n)\n## breaks: where you want to compute densities\nbreaks <- seq(0, max(dat$x), len = 5)\ndat$section <- cut(dat$x, breaks)\n## Get the residuals\ndat$res <- residuals(lm(y ~ x, data = dat))\n## Compute densities for each section, and flip the axes, and add means of sections\n## Note: the densities need to be scaled in relation to the section size (2000 here)\ndens <- do.call(rbind, lapply(split(dat, dat$section), function(x) {\n  d <- density(x$res, n = 50)\n  res <- data.frame(x = max(x$x) - d$y * 2000, y = d$x + mean(x$y))\n  res <- res[order(res$y), ]\n  ## Get some data for normal lines as well\n  xs <- seq(min(x$res), max(x$res), len = 50)\n  res <- rbind(res, data.frame(\n    y = xs + mean(x$y),\n    x = max(x$x) - 2000 * dnorm(xs, 0, sd(x$res))\n  ))\n  res$type <- rep(c(\"empirical\", \"normal\"), each = 50)\n  res\n}))\ndens$section <- rep(levels(dat$section), each = 100)\ndens <- dens %>%\n  filter(type == \"normal\")\n\nggplot(dat, aes(x, y)) +\n  geom_point(alpha = 0.05, size = 0.2) +\n  geom_smooth(method = \"lm\", fill = NA, se = FALSE, color = \"steelblue\") +\n  geom_path(data = dens, aes(x, y, group = interaction(section)), color = \"#8F2D56\", lwd = 1.1) +\n  geom_vline(xintercept = breaks, lty = 2, color = \"grey\") +\n  labs(\n    x = \"x\",\n    y = \"y\"\n  ) +\n  theme(\n    axis.title = element_text(size = 16),\n    axis.ticks = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank()\n  )\n```\n:::\n\n::: {.column width=\"30%\"}\n-   Mean: $\\beta_0 + \\beta_1 X$, the predicted value based on the regression model\n-   Variance: $\\sigma_\\epsilon^2$, constant across the range of $X$\n    -   How do we estimate $\\sigma_\\epsilon^2$?\n:::\n:::\n\n## Regression standard error {.smaller}\n\nOnce we fit the model, we can use the residuals to estimate the regression standard error (the spread of the distribution of the response, for a given value of the predictor variable):\n\n$$\n\\hat{\\sigma}_\\epsilon = \\sqrt{\\frac{\\sum_\\limits{i=1}^n(y_i - \\hat{y}_i)^2}{n-2}} = \\sqrt{\\frac{\\sum_\\limits{i=1}^ne_i^2}{n-2}}\n$$\n\n. . .\n\n::: question\n::: nonincremental\n1.  Why divide by $n - 2$?\n2.  Why do we care about the value of the regression standard error?\n:::\n:::\n\n## Standard error of $\\hat{\\beta}_1$\n\n$$\nSE_{\\hat{\\beta}_1} = \\hat{\\sigma}_\\epsilon\\sqrt{\\frac{1}{(n-1)s_X^2}}\n$$\n\n. . .\n\nor...\n\n```{r}\ntidy(df_fit) %>%\n  kable(digits = 2) %>%\n  row_spec(2, background = \"#D9E3E4\")\n```\n"},"formats":{"revealjs":{"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"error":false,"eval":true,"cache":null,"freeze":"auto","echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","incremental":true,"output-file":"lec-6.html"},"language":{},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"0.9.345","auto-stretch":true,"editor":"visual","title":"SLR: Mathematical models for inference","subtitle":"STA 210 - Spring 2022","author":"Dr. Mine Ã‡etinkaya-Rundel","footer":"[sta210-s22.github.io/website](https://sta210-s22.github.io/website/)","logo":"images/logo.png","theme":"slides.scss","multiplex":true,"transition":"fade","slideNumber":true,"chalkboard":true}}}}