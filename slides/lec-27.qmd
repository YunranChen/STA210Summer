---
title: "Project Peer Review and Data Cleaning"
subtitle: "STA 210 - Summer 2022"
author: "Yunran Chen"
footer:  "[yunranchen.github.io/STA210Summer/](https://yunranchen.github.io/STA210Summer/)"
logo: "images/logo.png"
format: 
  revealjs:
    theme: slides.scss
    transition: fade
    slide-number: true
    incremental: true 
    chalkboard: true
    highlight-style: ayu-mirage
code-link: true
editor: visual
execute:
  freeze: auto
  echo: true
---

```{r}
#| include: false

# figure options
knitr::opts_chunk$set(
  fig.width = 8, fig.asp = 0.618, out.width = "90%",
  fig.retina = 3, dpi = 300, fig.align = "center"
)

```

## Topics

-   [Project Peer Review](https://yunranchen.github.io/STA210Summer/project-description.html#peer-teamwork-evaluation)

-   Data Cleaning

## Project Peer Review (20 min)

## Data Cleaning using tidyverse 

-   Raw data to understanding, insight, and knowledge

-   Workflow

. . .

![](images/lec-27/data-science.png)


## Packages in Tidyverse

![](images/lec-27/tidyverse.png)

## Focus on data wrangling

![](images/lec-27/data-science.png)

-   Data import (`readr`)

-   Tidy data (`tidyr`,`tibble`)

-   Wrangle (`dplyr`,`stringr`, `lubridate`)

```{r}
library(tidyverse)
```


## Data import using `readr` {.smaller}

-   `read_csv`, ...

-    `parse_*`: parse the characters/numbers only
  
. . .

```{r}
parse_number("$100")
parse_number("20%")
parse_number("It cost $123.45")

# Used in America
parse_number("$123,456,789")
# Used in many parts of Europe
parse_number("123.456.789", locale = locale(grouping_mark = "."))
# Used in Switzerland
parse_number("123'456'789", locale = locale(grouping_mark = "'"))
```

## function `parse` in pkg `readr` {.smaller}

```{r}
x1 <- "El Ni\xf1o was particularly bad this year"
x2 <- "\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd"

x1
x2
parse_character(x1, locale = locale(encoding = "Latin1"))
parse_character(x2, locale = locale(encoding = "Shift-JIS"))
```


## function `parse` in pkg `readr` {.smaller}

```{r}
parse_date("1 janvier 2015", "%d %B %Y", locale = locale("fr"))
parse_date("01/02/15", "%m/%d/%y")
parse_date("01/02/15", "%d/%m/%y")
parse_date("01/02/15", "%y/%m/%d")
```

```{r}
parse_datetime("2010-10-01T2010")
library(hms)
parse_time("01:10 am")
```

## Other packages for data importing

-   Package `haven`: SPSS, Stata, SAS file

-   Package `readxl`: Excel file .xls, .xlsx

-   Package `jsonlite`/`htmltab`: json, html

-   use `as_tibble` to coerce a data frame to a tibble






